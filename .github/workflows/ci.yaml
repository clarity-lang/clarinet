name: CI
on:
  pull_request:
  push:
    branches:
      - master
      - staging
      - trying

env:
  CARGO_INCREMENTAL: 0
  CARGO_NET_RETRY: 10
  RUN_SLOW_TESTS: 1
  RUST_BACKTRACE: short
  RUSTFLAGS: -D warnings
  RUSTUP_MAX_RETRIES: 10

jobs:
  rust-audit:
    name: Audit Rust vulnerabilities
    runs-on: ubuntu-latest
    steps:
      - name: Install Rust toolchain
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          profile: minimal
          override: true

      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Set Cargo file permissions
        run: sudo chown -R $(whoami):$(id -ng) ~/.cargo/

      - name: Cache cargo
        uses: actions/cache@v2
        with:
          path: ~/.cargo/
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}

      - name: Install dependencies
        run: cargo install cargo-audit

      - name: Run audit
        run: cargo audit

  rust:
    name: Build & test
    runs-on: ${{ matrix.os }}
    # Related upstream issue:
    # https://github.com/nagisa/rust_libloading/issues/61#issuecomment-607941377
    #
    # env:
    #  CC: deny_c

    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      # We need to disable the existing toolchain to avoid updating rust-docs
      # which takes a long time. The fastest way to do this is to rename the
      # existing folder, as deleting it takes about as much time as not doing
      # anything and just updating rust-docs.
      - name: Rename existing rust toolchain (Windows)
        if: matrix.os == 'windows-latest'
        run: Rename-Item C:\Users\runneradmin\.rustup\toolchains\stable-x86_64-pc-windows-msvc C:\Users\runneradmin\.rustup\toolchains\stable-x86_64-pc-windows-msvc.old

      - name: Install Rust toolchain
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          profile: minimal
          override: true
          components: rustfmt, rust-src

      - if: matrix.os == 'ubuntu-latest'
        run: sudo chown -R $(whoami):$(id -ng) ~/.cargo/

      - name: Cache cargo
        uses: actions/cache@v2
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            target/
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}

      - name: Compile
        run: cargo build --release --locked

      - name: Unit Tests
        run: cargo test

      - name: Functional Tests
        run: |
          cd examples/counter
          ../../target/debug/clarinet test .

      # Cleans the `./target` dir after the build such that only dependencies are cached on CI
      - name: Prepare cache
        run: cargo xtask pre-cache

      - name: Remove xtask (Windows)
        if: matrix.os == 'windows-latest'
        run: Remove-Item ./target/debug/xtask.exe, ./target/debug/deps/xtask.exe

  # typescript:
  #   name: TypeScript
  #   runs-on: ubuntu-latest
  #   steps:
  #   - name: Checkout repository
  #     uses: actions/checkout@v2

  #   - name: Install Nodejs
  #     uses: actions/setup-node@v1
  #     with:
  #       node-version: 12.x

  #   - run: npm ci
  #     working-directory: ./editors/code

  #   - run: npm audit || { sleep 10 && npm audit; } || { sleep 30 && npm audit; }
  #     working-directory: ./editors/code

  # - run: npm run lint
  #   working-directory: ./editors/code

  # - run: npm run package --scripts-prepend-node-path
  #   working-directory: ./editors/code

  build-publish:
    name: Docker build & publish
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.docker_meta.outputs.version }}
    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          # Necessary for Semantic Release
          token: ${{ secrets.GH_TOKEN || secrets.GITHUB_TOKEN }}

      - name: Docker meta
        id: docker_meta
        uses: docker/metadata-action@v3
        with:
          images: ${{ github.repository }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}

      - name: Login to Dockerhub
        uses: docker/login-action@v1
        if: github.event_name != 'pull_request'
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_PASSWORD }}

      - name: Build/Tag/Push Image
        uses: docker/build-push-action@v2
        with:
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.docker_meta.outputs.tags }}
          labels: ${{ steps.docker_meta.outputs.labels }}

      - name: Semantic Release
        uses: cycjimmy/semantic-release-action@v2
        if: startsWith(github.ref, 'refs/tags/v')
        env:
          GITHUB_TOKEN: ${{ secrets.GH_TOKEN }}
          SEMANTIC_RELEASE_PACKAGE: ${{ github.event.repository.name }}
        with:
          extra_plugins: |
            @semantic-release/changelog
            @semantic-release/git
